package com.kh.model.dao;

import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import com.kh.model.vo.Member;

//import com.kh.common.JDBCTemplate;
import static com.kh.common.JDBCTemplate.*; //-> 일일이 JDBCTemplate클래스 입력안해도 됨


public class MemberDao {

	/*
	 * 기존의 방식 : DAO 클래스에 사용자가 요청할 때 마다 실행해야되는 SQL문을 자바소스코드내에 명시적으로 작성함 => 정적 코딩 방식
	 *	 > 문제점  : SQL구문을 수정해야될 경우 자바소스코드를 수정하는 셈 => 수정된 내용을 반영하고자 한다면 프로그램을 재 구동 해야됨!! (프로그램 비정상적으로 종료했다가 다시 구동해야되는 문제 발생)
	 *             => 유지보수에 불편하다!
	 * 
	 * 해결 방식    : SQL 문들을 별도로 관리하는 외부 파일(.properties)로 만들어서 사용자가 서비스를 요청할 때 마다
	 *              실시간으로 이 파일에 기록되어있는 SQL문을 동적으로 읽어들여서 실행						   => 동적 코딩 방식
	 */
	
	
	private Properties prop = new Properties(); // 빈 prop 상태
	
	// 사용자가 어떤 서비스 요청할 때 마다 매번 new MemberDao().xxxx(); 호출
	// 즉, 이 기본생성자를 매번 호출함!!
	public MemberDao() {
		
		try {
			prop.load(new FileReader("resources/query.properties"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	
	
	public int insertMember(Connection conn, Member m) {
		// insert문 => 처리된 행수(int)
		
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		//String sql = "INSERT INTO MEMBER VALUES(SEQ_USERNO.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE)";
		String sql = prop.getProperty("insertMember");
		
		try {
			
			pstmt = conn.prepareStatement(sql); // 미완성 sql문 => 바로실행(executeXXX) 불가 => 완성형태로 만든 후 실행
			
			// 미완성 sql => 완성형태로
			pstmt.setString(1, m.getUserId());
			pstmt.setString(2, m.getUserPwd());
			pstmt.setString(3, m.getUserName());
			pstmt.setString(4, m.getGender());
			pstmt.setInt(5, m.getAge());
			pstmt.setString(6, m.getEmail());
			pstmt.setString(7, m.getPhone());
			pstmt.setString(8, m.getAddress());
			pstmt.setString(9, m.getHobby());
			
			
			// 실행
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
				
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {

			e.printStackTrace();
		} finally {
			
			// 다쓴 자원반납
			/*
			try {
				if(pstmt != null && !pstmt.isClosed()) { // NullPointerException 방지차원
					pstmt.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			*/
			close(pstmt);
		
		}
		
		return result;
		
	}
	
	
	public ArrayList<Member> selectList(Connection conn) {
		// select문 => ResultSet (여러행)
		
		ArrayList<Member> list = new ArrayList<>();
		
		ResultSet rset = null;
		
		PreparedStatement pstmt = null;
		
		//String sql = "SELECT * FROM MEMBER ORDER BY USERNO ASC";
		String sql = prop.getProperty("selectList");
		
		try {
			pstmt = conn.prepareStatement(sql); // 완성된sql문 -> 완성되었기때문에 바로실행
			
			rset = pstmt.executeQuery();
			
			while(rset.next()){
							
				list.add(new Member(rset.getInt("USERNO"),
						   rset.getString("USERID"),
						   rset.getString("USERPWD"),
						   rset.getString("USERNAME"),
						   rset.getString("GENDER"),
						   rset.getInt("AGE"),
					       rset.getString("EMAIL"),
						   rset.getString("PHONE"),
						   rset.getString("ADDRESS"),
						   rset.getString("HOBBY"),
						   rset.getDate("ENROLLDATE")));
				
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			/*
			try {
				if(rset != null && !rset.isClosed()) {
					rset.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			*/
			close(rset);
			
			/*
			try {
				if(pstmt != null && !pstmt.isClosed()) {
					pstmt.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			*/
			close(pstmt);
			
		}
		
		return list;
		
	}
	
	
	public Member selectByUserId(Connection conn, String userId) {
		// Select문 => ResultSet (한 행)
		
		Member m = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		//String sql = "SELECT * FROM MEMBER WHERE USERID = ?";
		String sql = prop.getProperty("selectByUserId");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				
				m = new Member(rset.getInt("USERNO"),
						       rset.getString("USERID"),
						       rset.getString("USERPWD"),
						       rset.getString("USERNAME"),
						       rset.getString("GENDER"),
						       rset.getInt("AGE"),
						       rset.getString("EMAIL"),
						       rset.getString("PHONE"),
						       rset.getString("ADDRESS"),
						       rset.getString("HOBBY"),
						       rset.getDate("ENROLLDATE"));
				
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		return m;
		
	}
	
	public ArrayList<Member> selectByUserName(Connection conn, String keyword) {
		// select문 => ResultSet (여러 행)
		
		ArrayList<Member> list = new ArrayList<>();
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		//String sql = "SELECT * FROM MEMBER WHERE USERNAME LIKE '%' || ? || '%'";
		String sql = prop.getProperty("selectByUserName");
		
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, keyword);
			
			rset = pstmt.executeQuery();
			
			while(rset.next()) {
				list.add(new Member(rset.getInt("USERNO"),
						            rset.getString("USERID"),
						            rset.getString("USERPWD"),
						            rset.getString("USERNAME"),
						            rset.getString("GENDER"),
						            rset.getInt("AGE"),
						            rset.getString("EMAIL"),
								    rset.getString("PHONE"),
								    rset.getString("ADDRESS"),
								    rset.getString("HOBBY"),
								    rset.getDate("ENROLLDATE")));
				
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return list;
		
	}
	
	
	public int updateMember(Connection conn, Member m) {
		// update문 -> result -> 트랜잭션 처리
		
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		//String sql = "UPDATE MEMBER SET USERPWD = ?, EMAIL = ?, PHONE = ?, ADDRESS = ? WHERE USERID = ?";
		String sql = prop.getProperty("updateMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, m.getUserPwd());
			pstmt.setString(2, m.getEmail());
			pstmt.setString(3, m.getPhone());
			pstmt.setString(4, m.getAddress());
			pstmt.setString(5, m.getUserId());
			
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			
			try {
				if(pstmt != null && !pstmt.isClosed()) {
					pstmt.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		}
		
		return result;
		
		
	}
	
	public int deleteMember(Connection conn, String userId) {
		// delete문 -> result(int) -> 트랜잭션 처리
		
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		//String sql = "DELETE FROM MEMBER WHERE USERID = ?";
		String sql = prop.getProperty("deleteMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstmt);
		}
		
		return result;
		
		
	}
	
	
	
	public String loginMember(Connection conn, String userId, String userPwd) {
		// SELECT문 -> ResultSet(한 행)
		
		String userName = null; // 이름만 가져오기 때문에 Member변수 사용 안했음
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;

		String sql = prop.getProperty("loginMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			pstmt.setString(2, userPwd);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				
				userName = rset.getString("USERNAME");
				
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rset);
			close(pstmt);
		}
		
		
		return userName;
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
