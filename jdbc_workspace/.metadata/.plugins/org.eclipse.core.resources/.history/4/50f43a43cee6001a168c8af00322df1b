package com.kh.model.service;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

import com.kh.common.JDBCTemplate;
import com.kh.model.dao.MemberDao;
import com.kh.model.vo.Member;

// Service : DB와 연결시키는 Connection 객체 생성 후
//           DAO 호출(이때, 여기서 생성된Connection 객체 전달값을 같이 넘겨줄꺼임!)
//           반환받은 결과(만일, result가 반환되었을 경우 트랜잭션처리도 할꺼임)
public class MemberService {

	
	public int insertMember(Member m) {
		
		// 필요한 변수 셋팅
		
		/*
		int result = 0;
		
		Connection conn = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "JDBC", "JDBC");
			
			result = new MemberDao().insertMember(conn, m);	
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		*/
		Connection conn = JDBCTemplate.getConnection();
		int result = new MemberDao().insertMember(conn, m);
		
		
		// 트랜잭션 처리도 예외처리해야함
		/*
		if(result > 0) {
			try {
				if(conn != null && !conn.isClosed()) {
					conn.commit();				
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}else {
			try {
				if(conn != null && !conn.isClosed()) {
					conn.rollback();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		*/
		
		if(result > 0) {
			JDBCTemplate.commit(conn);
		}else {
			JDBCTemplate.commit(conn);
		}
		
		
		// 다쓴 자원반납
		/*
		try {
			if(conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		*/
		JDBCTemplate.close(conn);
		
		
		return result;
		
	}
	
	
	public ArrayList<Member> selectList() {
		
		
		/*
		Connection conn = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDribver");
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhot:1521:xe", "JDBC", "JDBC");
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		*/
		
		Connection conn = JDBCTemplate.getConnection();
		
	 	ArrayList list = new MemberDao().selectList(conn);
		
	 	// Connection객체 반납
		JDBCTemplate.close(conn);
		
		return list;
		
	}
	
	
	public Member selectByUserId(String userId) {
		
		Connection conn = JDBCTemplate.getConnection();
		
		Member m = new MemberDao().selectByUserId(conn, userId);
		
		JDBCTemplate.close(conn);
		
		return m;
		
	}
	
	
	public void selectByUserName(String keyword) {
		
		Connection conn = JDBCTemplate.getConnection();
		
		ArrayList<Member> list = new MemberDao().selectByUserName(conn, keyword);
		
		
		
		
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
}
