package com.kh.model.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.kh.model.vo.Member;

// DAO : DB와 직접적으로 접근해서 sql 실행 후 결과 받기 (JDBC)
/*
 * * JDBC 처리 순서
 * 1) jdbc driver 등록(해당 DBMS에서 제공하는)
 * 2) Connection 객체 생성 (DB와 연결정보를 담는객체 == Connection) url, username, password
 * 3) [Prepared]Statement 객체 생성
 * 4) SQL문 실행 : executeXXX(실행할sql) --> executeUpdate(dml문) : int  /  executeQuery(select문) : ResultSet
 * 5) 결과 받기 (처리된행수int  /  조회결과ResultSet)
 *   6_1) 조회결과 ResultSet --> 조회결과를 vo에 주섬주섬담기 (한 행 : vo객체 한개  /  여러 행 : ArrayList<vo>)
 *   6_2) 처리된행수 int     --> 트랜잭션 처리(commit  /  rollback)
 * 7) 다 쓴자원반납(close) : 생성된 역순으로
 */

public class MemberDao {
	
	/*
	 * * Statement 와 PreparedStatement 의 차이점
	 * - Statement 같은 경우 완성된 sql문을 바로 실행하는 객체(== sql문을 완성형대로!! == 사용자가 입력한 값으로 채워진 형태로!!)
	 * - PreparedStatement 같은 경우 "미완성된 sql문"을 잠시 보관해둘 수 있는 객체
	 *   해당 sql문 실행하기 전 완성형태로 만든 후 실행 하면됨!!
	 * 
	 * * 기존의 Statement 방식
	 *   Connection 객체를 통해 Statement 객체 생성           	 	: stmt = conn.createStatement();
	 *   Statement 객체를 통해 "완성된sql"문 실행 및 결과받기	: 결과 = stmt.executeXXX(완성된sql문);
	 *   
	 * * PreparedStatement 방식
	 *   Connection 객체를 통해 PreparedStatement 객체 생성 	: pstmt = conn.createPrepareStatement(미완성된sql문);
	 *   해당 sql문 실행 전에 PreparedStatement에 담겨있는
	 *                   미완성된 sql문 완성형태로 만들기!  	: pstmt.setXXX(1, "대체할값"); pstmt.setXXX(2, 대체할값);
	 *   해당 완성된 sql문 실행 및 결과받기                           	: 결과 = pstmt.executeXXX();
	 */
	
	
	public int insertMember(Member m) { // insert문 => 처리된 행의 갯수(int) => 트랜잭션처리
		
		// 필요한 변수들 셋팅
		
		int result = 0; // 처리된 결과를(처리된 행수) 담을 변수
		
		Connection conn = null; // DB의 연결정보를 담는 객체
		PreparedStatement pstmt  = null;
		
		// 실행하고자 하는 sql문 미완성된 형태로 둘 수 있음
		// 미리 사용자가 입력한 값들이 들어갈 수 있게 공간(? == 홀더)만 확보해두면됨!!
		String sql = "INSERT INTO MEMBER VALUES(SEQ_USERNO.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE)";
		
		try {
			// 1) JDBC 드라이버 등록
			Class.forName("oracle.jdbc.driver.OracleDriver"); // object6 추가안되있을 경우, 오타일 경우 -> 오류
			
			// 2) 
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "JDBC", "JDBC");
			
			// 3)
			pstmt = conn.prepareStatement(sql); // PreparedStatement 객체 생성시 sql문 담은 채로 생성!!
			
			// 현재 pstmt에 담긴 sql문이 미완성된 상태기 때문에 바로 실행은 불가!!! --> 각각의 공간에 들어갈 실제값 (사용자가입력한 값) 대체한 후 실행
			// pstmt.setXXX(홀더순번, 대체할값)
			// > pstmt.setString(홀더순번, 대체할값); --> '대체할값'(알아서 양엾에서 홀따옴표 붙어서 들어감)
			// > pstmt.setInt(홀더순번, 대체할값);    -->  대체할값
			pstmt.setString(1, m.getUserId());
			pstmt.setString(2, m.getUserPwd());
			pstmt.setString(3, m.getUserName());
			pstmt.setString(4, m.getGender());
			pstmt.setInt(5, m.getAge());
			pstmt.setString(6, m.getEmail());
			pstmt.setString(7, m.getPhone());
			pstmt.setString(8, m.getAddress());
			pstmt.setString(9, m.getHobby());
			
			// pstmt는 속도가 빠름 - 권장 방법
			// pstmt의 최대단점 : 완성된 sql문의 형태를 미리 볼 수 없음..
			
			// 4, 5) sql문 실행 및 결과받기
			result = pstmt.executeUpdate();
			
			if(result > 0) {
				conn.commit();
			}else {
				conn.rollback();
			}
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				// 7)
				pstmt.close(); 
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return result;
		
	}
	
	public ArrayList<Member> selectMember() {
		
		// 필요한 변수 셋팅
		
		ArrayList<Member> list = new ArrayList<>();
		
		Connection conn = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = "SELECT * FROM MEMBER";
		
		
		try {
			// 1)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2)
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","JDBC","JDBC");
			
			// 3)
			pstmt = conn.prepareStatement(sql);
			
			// 4, 5)
			rset = pstmt.executeQuery();
			
			// 6)
			while(rset.next()) {
				
				Member m = new Member();
				
				m.setUserNo(rset.getInt("USERNO"));
				m.setUserId(rset.getString("USERID"));
				m.setUserPwd(rset.getString("USERPWD"));
				m.setUserName(rset.getString("USERNAME"));
				m.setGender(rset.getString("GENDER"));
				m.setAge(rset.getInt("AGE"));
				m.setEmail(rset.getString("EMAIL"));
				m.setPhone(rset.getString("PHONE"));
				m.setAddress(rset.getString("ADDRESS"));
				m.setHobby(rset.getString("HOBBY"));
				m.setEnrollDate(rset.getDate("ENROLLDATE"));

				
				list.add(m);
			}
			
			
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				// 7)
				rset.close();
				pstmt.close();
				conn.close();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		}
		
		return list;
		
	}
	
	
	public Member inputMemberId(String userId) {
		
		// 필요한 변수 셋팅
		Member m = null;
		
		Connection conn = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = "SELECT * FROM MEMBER WHERE USERID = ?";
		
		
		try {
			// 1)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2)
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "JDBC", "JDBC");
			
			// 3)
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			
			// 4,5)
			rset = pstmt.executeQuery();
			
			// 6)
			if(rset.next()) {
				m = new Member(
				rset.getInt("USERNO"),
				rset.getString("USERID"),
				rset.getString("USERPWD"),
				rset.getString("USERNAME"),
				rset.getString("GENDER"),
				rset.getInt("AGE"),
				rset.getString("EMAIL"),
				rset.getString("PHONE"),
				rset.getString("ADDRESS"),
				rset.getString("HOBBY"),
				rset.getDate("ENROLLDATE"));
				
			}
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				rset.close();
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		return m;
		
	}
	
	
	public ArrayList<Member> inputMemberName(String userName) {
		
		// 필요한 변수
		ArrayList<Member> list = new ArrayList<>();
		
		Connection conn = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = "SELECT * FROM MEMBER WHERE USERNAME LIKE '%'?'%'";
		
		
		try {
			// 1)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2)
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","JDBC","JDBC");
			
			// 3)
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, userName);
			
			// 4, 5)
			rset = pstmt.executeQuery();
			
			
			while(rset.next()) {
				
				Member m = new Member();
				
				m.setUserNo(rset.getInt("USERNO"));
				m.setUserId(rset.getString("USERID"));
				m.setUserPwd(rset.getString("USERPWD"));
				m.setUserName(rset.getString("USERNAME"));
				m.setGender(rset.getString("GENDER"));
				m.setAge(rset.getInt("AGE"));
				m.setEmail(rset.getString("EMAIL"));
				m.setPhone(rset.getString("PHONE"));
				m.setAddress(rset.getString("ADDRESS"));
				m.setHobby(rset.getString("HOBBY"));
				m.setEnrollDate(rset.getDate("ENROLLDATE"));
				
				list.add(m);
				
			}
			
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				rset.close();
				pstmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return list;
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
